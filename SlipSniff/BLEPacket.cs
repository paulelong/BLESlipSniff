//---------------------------------------------------------------------
// <autogenerated>
//
//     Generated by Message Compiler (mc.exe)
//
//     Copyright (c) Microsoft Corporation. All Rights Reserved.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//---------------------------------------------------------------------

namespace ETW
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Diagnostics;
    using System.Diagnostics.Eventing;
    using Microsoft.Win32;
    using System.Runtime.InteropServices;
    using System.Security.Principal;

    public static class BLESniffRaw
    {
        //
        // Provider "BLESniffRaw" event count = 1
        //

        internal static EventProviderVersionTwo m_provider = new EventProviderVersionTwo(new Guid("e3c99c07-0ea4-463d-b4f6-c9724428d18c"));
        //
        // Task :  eventGUIDs
        //
        private static Guid BLESniffTaskId = new Guid("29f31d7a-a93c-40a2-b9fe-f7935c113315");

        //
        // Event Descriptors
        //
        private static EventDescriptor BLERawMessage;

        static BLESniffRaw()
        {
            unchecked
            {
                BLERawMessage = new EventDescriptor(0x3ed, 0x1, 0x10, 0x4, 0xa, 0x1, (long)0x8000000000000001);
            }
        }

        //
        // Event method for BLERawMessage
        //
        public static bool EventWriteBLERawMessage(ushort size, byte[] Payload)
        {
            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateBLERawMessageTemplate(ref BLERawMessage, size, Payload);
        }
    }

    internal class EventProviderVersionTwo : EventProvider
    {
         internal EventProviderVersionTwo(Guid id)
                : base(id)
         {}

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        private struct EventData
        {
            [FieldOffset(0)]
            internal UInt64 DataPointer;
            [FieldOffset(8)]
            internal uint Size;
            [FieldOffset(12)]
            internal int Reserved;
        }

        internal unsafe bool TemplateBLERawMessageTemplate(
            ref EventDescriptor eventDescriptor,
            ushort size,
            byte[] Payload
            )
        {
            int argumentCount = 2;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                userDataPtr[0].DataPointer = (UInt64)(&size);
                userDataPtr[0].Size = (uint)(sizeof(short)  );

                // Value has length = size:
                if (Payload.Length < sizeof(byte)*size  ) return false;
                userDataPtr[1].Size = (uint)(sizeof(byte)*size  );

                fixed (byte* a0 = Payload)
                {
                    userDataPtr[1].DataPointer = (ulong)a0;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;
        }
    }
}
